<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.quhxuxm.quh.project.simpleblog.repository.view.IAuthenticationViewMapper">
    <cache/>
    <resultMap type="authentication" id="authenticationMapper">
        <id column="_id" property="id"/>
        <result column="token" property="token"/>
        <result column="password" property="password"/>
        <result column="register_date" property="registerDate"/>
        <result column="last_login_date" property="lastLoginDate"/>
        <result column="type" property="type"
                javaType="authenticationType"/>
        <collection property="roles" ofType="com.quhxuxm.quh.project.simpleblog.domain.pojo.Role">
            <result column="role_id" property="id"/>
            <result column="role_name" property="name"/>
        </collection>
    </resultMap>
    <select id="findByTokenAndType" resultMap="authenticationMapper">
        SELECT
            a._id             AS _id,
            a.token           AS token,
            a.password        AS password,
            a.register_date   AS register_date,
            a.last_login_date AS last_login_date,
            r._id             AS role_id,
            r.name            AS role_name,
            a.type            AS type
        FROM authentication a
            INNER JOIN authentication_role ar ON a._id = ar.authentication_id
            INNER JOIN role r ON ar.role_id = r._id
        WHERE a.token = #{token} AND a.type = #{type};
    </select>
    <select id="findById" resultMap="authenticationMapper">
        SELECT
            a._id             AS _id,
            a.token           AS token,
            a.password        AS password,
            a.register_date   AS register_date,
            a.last_login_date AS last_login_date,
            r._id             AS role_id,
            r.name            AS role_name,
            a.type            AS type
        FROM authentication a
            INNER JOIN authentication_role ar ON a._id = ar.authentication_id
            INNER JOIN role r ON ar.role_id = r._id
        WHERE a._id = #{id};
    </select>
    <insert id="create" useGeneratedKeys="true" keyProperty="id"
            parameterType="authentication">
        INSERT INTO authentication (token, password, type, register_date, last_login_date)
        VALUES (#{token},
                #{password},
                #{type}, #{registerDate},
                #{lastLoginDate})
    </insert>
    <update id="update">
        UPDATE authentication
        SET password        = #{password},
            last_login_date = #{lastLoginDate}
        WHERE _id = #{id}
    </update>
    <insert id="assignRole">
        INSERT INTO authentication_role (authentication_id, role_id)
        VALUES (#{authenticationId}, #{roleId})
    </insert>

    <select id="isTokenExist" resultType="_boolean">
        SELECT EXISTS(SELECT 1
                      FROM authentication
                      WHERE token = #{token})
    </select>

</mapper>
